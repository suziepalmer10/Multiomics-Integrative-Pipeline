concat_filtered_list1 <- concat_filtered_list[!(names(concat_filtered_list) %in% remove_names)]
concat_unfiltered_list1 <- concat_unfiltered_list[!(names(concat_unfiltered_list) %in% remove_names)]
# Function to extract top 20 features from a list of dataframes
extract_top_20_features <- function(dataframes_list) {
top_20_features_list <- lapply(names(dataframes_list), function(name) {
top_20 <- dataframes_list[[name]]$Feature[1:20] # Extract top 20 features
#list(name = name, top_20_features = top_20)    # Store with name
})
# Name each list element with the original dataframe name
names(top_20_features_list) <- names(dataframes_list)
return(top_20_features_list)
}
metab_filtered_list2 <- extract_top_20_features(metab_filtered_list1)
metab_unfiltered_list2 <- extract_top_20_features(metab_unfiltered_list1)
taxa_filtered_list2 <- extract_top_20_features(taxa_filtered_list1)
taxa_unfiltered_list2 <- extract_top_20_features(taxa_unfiltered_list1)
concat_filtered_list2 <- extract_top_20_features(concat_filtered_list1)
concat_unfiltered_list2 <- extract_top_20_features(concat_unfiltered_list1)
# Function to separate lists based on a pattern
separate_lists_by_pattern <- function(input_list, pattern) {
matched <- input_list[grepl(pattern, names(input_list))]
return(matched)
}
# Define patterns as a named list
pattern_groups <- list(
filtered_metabolomics = c(
"era_age", "era_alcohol", "era_cholesterol", "era_gender", "era_sg",
"franzosa_ControlvsCD_Age", "franzosa_ControlvsCD_Conv", "franzosa_ControlvsCD_Fp",
"franzosa_ControlvsDisease_Age", "franzosa_ControlvsDisease_ConvDisease", "franzosa_ControlvsDisease_Fp",
"franzosa_ControlvsUC_Age", "franzosa_ControlvsUC_Conv", "franzosa_ControlvsUC_Fp",
"yachida_age", "yachida_alcohol", "yachida_BMI", "yachida_BrinkmanIndex",
"yachida_gender", "yachida_healthyvscancer", "yachida_healthyvsearly",
"yachida_healthyvsstageI_II", "yachida_healthyvsstageIII_IV",
"wang_age", "wang_bmi", "wang_creatinine", "wang_egfr", "wang_gender",
"wang_studygroup", "wang_urea"
),
unfiltered_metabolomics = c(
"nf_era_age", "nf_era_alcohol", "nf_era_cholesterol", "nf_era_gender", "nf_era_glucose", "nf_era_sg",
"un_franzosa_ControlvsCD_Age", "un_franzosa_ControlvsCD_Conv", "un_franzosa_ControlvsCD_Fp",
"un_franzosa_ControlvsDisease_Age", "un_franzosa_ControlvsDisease_ConvDisease", "un_franzosa_ControlvsDisease_Fp",
"un_franzosa_ControlvsUC_Age", "un_franzosa_ControlvsUC_Conv", "un_franzosa_ControlvsUC_Fp",
"nf_yachida_age", "nf_yachida_alcohol", "nf_yachida_BMI", "nf_yachida_BrinkmanIndex", "nf_yachida_gender",
"nf_yachida_healthyvscancer", "nf_yachida_healthyvsearly", "nf_yachida_healthyvsstageI_II",
"nf_yachida_healthyvsstageIII_IV", "nf_wang_age", "nf_wang_bmi", "nf_wang_creatinine",
"nf_wang_egfr", "nf_wang_gender", "nf_wang_studygroup", "nf_wang_urea"
),
filtered_taxa = c(
'era_age', 'era_alcohol', 'era_cholesterol', 'era_gender',
'era_glucose', 'era_sg', 'franzosa_ControlvsCD_Age',
'franzosa_ControlvsCD_Conv', 'franzosa_ControlvsCD_Fp',
'franzosa_ControlvsDisease_Age', 'franzosa_ControlvsDisease_ConvDisease',
'franzosa_ControlvsDisease_Fp', 'franzosa_ControlvsUC_Age',
'franzosa_ControlvsUC_Conv', 'franzosa_ControlvsUC_Fp',
'yachida_age', 'yachida_alcohol', 'yachida_BMI', 'yachida_BrinkmanIndex',
'yachida_gender', 'yachida_healthyvscancer', 'yachida_healthyvsearly',
'yachida_healthyvsstageI_II', 'yachida_healthyvsstageIII_IV',
'wang_age', 'wang_bmi', 'wang_creatinine', 'wang_egfr', 'wang_gender',
'wang_studygroup', 'wang_urea'
),
unfiltered_taxa = c(
'nf_era_age', 'nf_era_alcohol', 'nf_era_cholesterol', 'nf_era_gender',
'nf_era_glucose', 'nf_era_sg', 'un_franzosa_ControlvsCD_Age',
'un_franzosa_ControlvsCD_Conv', 'un_franzosa_ControlvsCD_Fp',
'un_franzosa_ControlvsDisease_Age', 'un_franzosa_ControlvsDisease_ConvDisease',
'un_franzosa_ControlvsDisease_Fp', 'un_franzosa_ControlvsUC_Age',
'un_franzosa_ControlvsUC_Conv', 'un_franzosa_ControlvsUC_Fp',
'nf_yachida_age', 'nf_yachida_alcohol', 'nf_yachida_BMI',
'nf_yachida_BrinkmanIndex', 'nf_yachida_gender', 'nf_yachida_healthyvscancer',
'nf_yachida_healthyvsearly', 'nf_yachida_healthyvsstageI_II',
'nf_yachida_healthyvsstageIII_IV', 'nf_wang_age', 'nf_wang_bmi',
'nf_wang_creatinine', 'nf_wang_egfr', 'nf_wang_gender',
'nf_wang_studygroup', 'nf_wang_urea'
),
concat_filtered = c(
'era_age', 'era_alcohol', 'era_cholesterol', 'era_gender', 'era_glucose',
'era_sg', 'franzosa_ControlvsCD_Age', 'franzosa_ControlvsCD_Conv',
'franzosa_ControlvsCD_Fp', 'franzosa_ControlvsDisease_Age',
'franzosa_ControlvsDisease_ConvDisease', 'franzosa_ControlvsDisease_Fp',
'franzosa_ControlvsUC_Age', 'franzosa_ControlvsUC_Conv', 'franzosa_ControlvsUC_Fp',
'yachida_age', 'yachida_alcohol', 'yachida_BMI', 'yachida_BrinkmanIndex',
'yachida_gender', 'yachida_healthyvscancer', 'yachida_healthyvsearly',
'yachida_healthyvsstageI_II', 'yachida_healthyvsstageIII_IV',
'wang_age', 'wang_bmi', 'wang_creatinine', 'wang_egfr', 'wang_gender',
'wang_studygroup', 'wang_urea'
),
concat_unfiltered = c(
'nf_era_age', 'nf_era_alcohol', 'nf_era_cholesterol', 'nf_era_gender',
'nf_era_glucose', 'nf_era_sg', 'un_franzosa_ControlvsCD_Age',
'un_franzosa_ControlvsCD_Conv', 'un_franzosa_ControlvsCD_Fp',
'un_franzosa_ControlvsDisease_Age', 'un_franzosa_ControlvsDisease_Conv',
'un_franzosa_ControlvsDisease_Fp', 'un_franzosa_ControlvsUC_Age',
'un_franzosa_ControlvsUC_Conv', 'un_franzosa_ControlvsUC_Fp',
'nf_yachida_age', 'nf_yachida_alcohol', 'nf_yachida_BMI',
'nf_yachida_BrinkmanIndex', 'nf_yachida_gender', 'nf_yachida_healthyvscancer',
'nf_yachida_healthyvsearly', 'nf_yachida_healthyvsstageI_II',
'nf_yachida_healthyvsstageIII_IV', 'nf_wang_age', 'nf_wang_bmi',
'nf_wang_creatinine', 'nf_wang_egfr', 'nf_wang_gender', 'nf_wang_studygroup',
'nf_wang_urea'
)
)
# Create a named list of the extracted feature lists
feature_lists <- list(
metab_filtered = metab_filtered_list2,
metab_unfiltered = metab_unfiltered_list2,
taxa_filtered = taxa_filtered_list2,
taxa_unfiltered = taxa_unfiltered_list2,
concat_filtered = concat_filtered_list2,
concat_unfiltered = concat_unfiltered_list2
)
# Function to compute detailed comparisons
compute_detailed_comparisons <- function(lists) {
if (length(lists) != 3) return(NA)
enet <- lists[[1]]; rf <- lists[[2]]; xgb <- lists[[3]]
format_count <- function(count) round(count / 20, 2)
result <- list(
all_overlap = format_count(length(intersect(intersect(enet, rf), xgb))),
enet_rf_overlap = format_count(length(setdiff(intersect(enet, rf), xgb))),
enet_xgb_overlap = format_count(length(setdiff(intersect(enet, xgb), rf))),
rf_xgb_overlap = format_count(length(setdiff(intersect(rf, xgb), enet))),
enet_only = format_count(length(setdiff(enet, union(rf, xgb)))),
rf_only = format_count(length(setdiff(rf, union(enet, xgb)))),
xgb_only = format_count(length(setdiff(xgb, union(enet, rf))))
)
return(result)
}
# Function to convert a list to a dataframe for plotting
convert_list_to_dataframe <- function(overlap_list) {
data <- data.frame(
Method = c("all_overlap", "enet_rf", "enet_xgb", "rf_xgb", "enet", "rf", "xgb"),
enet = c(overlap_list$all_overlap, overlap_list$enet_rf_overlap, overlap_list$enet_xgb_overlap, 0, overlap_list$enet_only, 0, 0),
rf   = c(overlap_list$all_overlap, overlap_list$enet_rf_overlap, 0, overlap_list$rf_xgb_overlap, 0, overlap_list$rf_only, 0),
xgb  = c(overlap_list$all_overlap, 0, overlap_list$enet_xgb_overlap, overlap_list$rf_xgb_overlap, 0, 0, overlap_list$xgb_only)
)
return(data)
}
# Function to generate and save a plot
generate_and_save_plot <- function(df, filename, output_dir) {
df_melted <- melt(df, id.vars = "Method", variable.name = "Model", value.name = "Value")
df_melted$Method <- factor(df_melted$Method, levels = c("all_overlap", "enet_rf", "enet_xgb", "rf_xgb", "enet", "rf", "xgb"))
p <- ggplot(df_melted, aes(x = Model, y = Value, fill = Method, pattern = Method)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Model", y = "Proportion", fill = "Category") +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c(
"enet" = "white", "rf" = "gray", "xgb" = "black", "enet_rf" = "green",
"enet_xgb" = "blue", "rf_xgb" = "pink", "all_overlap" = "purple"
)) +
theme_minimal() +
coord_flip()
if (!dir.exists(output_dir)) dir.create(output_dir, recursive = TRUE)
pdf(file.path(output_dir, paste0(filename, ".pdf")))
print(p)
dev.off()
}
# Apply the functions to each pattern group
output_base_path <- "/Users/suzettepalmer/Desktop/IntegratedLearner_Dec2024/Coefficients/barplots"
for (group_name in names(pattern_groups)) {
patterns <- pattern_groups[[group_name]]
input_list <- feature_lists[[group_name]]
separated_lists <- lapply(patterns, function(p) separate_lists_by_pattern(input_list, paste0("^", p)))
names(separated_lists) <- patterns
comparisons_results <- lapply(separated_lists, compute_detailed_comparisons)
comparisons_results <- comparisons_results[!sapply(comparisons_results, is.null)]
for (name in names(comparisons_results)) {
overlap_list <- comparisons_results[[name]]
if (is.null(overlap_list) || all(is.na(overlap_list))) next
df <- convert_list_to_dataframe(overlap_list)
generate_and_save_plot(df, name, file.path(output_base_path, group_name))
}
}
# Apply the functions to each pattern group
output_base_path <- "/Users/suzettepalmer/Desktop/IntegratedLearner_Dec2024/Coefficients/barplots"
for (group_name in names(pattern_groups)) {
patterns <- pattern_groups[[group_name]]
input_list <- feature_lists[[group_name]]
separated_lists <- lapply(patterns, function(p) separate_lists_by_pattern(input_list, paste0("^", p)))
names(separated_lists) <- patterns
comparisons_results <- lapply(separated_lists, compute_detailed_comparisons)
comparisons_results <- comparisons_results[!sapply(comparisons_results, is.null)]
for (name in names(comparisons_results)) {
overlap_list <- comparisons_results[[name]]
if (is.null(overlap_list) || all(is.na(overlap_list))) next
df <- convert_list_to_dataframe(overlap_list)
generate_and_save_plot(df, name, file.path(output_base_path, group_name))
}
}
View(separated_lists)
# Function to extract top 20 features for a list of datasets
extract_top_features <- function(dataset_list) {
lapply(dataset_list, extract_top_20_features)
}
# Apply the function to all lists
lists <- list(
metab_filtered = metab_filtered_list1,
metab_unfiltered = metab_unfiltered_list1,
taxa_filtered = taxa_filtered_list1,
taxa_unfiltered = taxa_unfiltered_list1,
concat_filtered = concat_filtered_list1,
concat_unfiltered = concat_unfiltered_list1
)
# Extract top 20 features for each list
extracted_lists <- lapply(lists, extract_top_features)
View(lists)
extract_top_20_features <- function(dataframes_list) {
top_20_features_list <- lapply(names(dataframes_list), function(name) {
top_20 <- dataframes_list[[name]]$Feature[1:20] # Extract top 20 features
#list(name = name, top_20_features = top_20)    # Store with name
})
# Name each list element with the original dataframe name
names(top_20_features_list) <- names(dataframes_list)
return(top_20_features_list)
}
# Function to extract top 20 features for a list of datasets
extract_top_features <- function(dataset_list) {
lapply(dataset_list, extract_top_20_features)
}
# Apply the function to all lists
lists <- list(
metab_filtered = metab_filtered_list1,
metab_unfiltered = metab_unfiltered_list1,
taxa_filtered = taxa_filtered_list1,
taxa_unfiltered = taxa_unfiltered_list1,
concat_filtered = concat_filtered_list1,
concat_unfiltered = concat_unfiltered_list1
)
# Extract top 20 features for each list
extracted_lists <- lapply(lists, extract_top_features)
# Function to extract top 20 features for a list of datasets
extract_top_features <- function(dataset_list) {
# Check if dataset_list is a list
if (!is.list(dataset_list)) {
stop("Input is not a list of dataframes")
}
# Apply function to each dataframe in the list
lapply(dataset_list, function(df) {
if (is.data.frame(df) && "Feature" %in% colnames(df)) {
# Extract top 20 features based on 'Importance' column
return(head(df[order(-df$Importance), ], 20))
} else {
warning("Element is not a dataframe or lacks 'Feature' column")
return(NULL)
}
})
}
# Apply the function to all lists
lists <- list(
metab_filtered = metab_filtered_list1,
metab_unfiltered = metab_unfiltered_list1,
taxa_filtered = taxa_filtered_list1,
taxa_unfiltered = taxa_unfiltered_list1,
concat_filtered = concat_filtered_list1,
concat_unfiltered = concat_unfiltered_list1
)
# Extract top 20 features for each list
extracted_lists <- lapply(lists, extract_top_features)
# Function to extract top 20 features from a list of dataframes
extract_top_20_features <- function(dataframes_list) {
top_20_features_list <- lapply(names(dataframes_list), function(name) {
top_20 <- dataframes_list[[name]]$Feature[1:20] # Extract top 20 features
#list(name = name, top_20_features = top_20)    # Store with name
})
# Name each list element with the original dataframe name
names(top_20_features_list) <- names(dataframes_list)
return(top_20_features_list)
}
metab_filtered_list2 <- extract_top_20_features(metab_filtered_list1)
metab_unfiltered_list2 <- extract_top_20_features(metab_unfiltered_list1)
taxa_filtered_list2 <- extract_top_20_features(taxa_filtered_list1)
taxa_unfiltered_list2 <- extract_top_20_features(taxa_unfiltered_list1)
concat_filtered_list2 <- extract_top_20_features(concat_filtered_list1)
concat_unfiltered_list2 <- extract_top_20_features(concat_unfiltered_list1)
# Function to automate the process
automate_comparisons <- function(output_path, patterns, filtered_list) {
# Ensure output_path exists
if (!dir.exists(output_path)) dir.create(output_path, recursive = TRUE)
# Separate lists based on patterns
separated_lists <- lapply(patterns, function(p) separate_lists_by_pattern(filtered_list, paste0("^", p)))
# Function to compute detailed comparisons
compute_detailed_comparisons <- function(lists) {
if (length(lists) != 3) return(NA)  # Skip if lists do not have exactly 3 elements
enet <- lists[[1]]
rf <- lists[[2]]
xgb <- lists[[3]]
format_count <- function(count) round(count / 20, 2)
common_all <- intersect(intersect(enet, rf), xgb)
enet_rf_overlap <- setdiff(intersect(enet, rf), xgb)
enet_xgb_overlap <- setdiff(intersect(enet, xgb), rf)
rf_xgb_overlap <- setdiff(intersect(rf, xgb), enet)
enet_only <- setdiff(enet, union(rf, xgb))
rf_only <- setdiff(rf, union(enet, xgb))
xgb_only <- setdiff(xgb, union(enet, rf))
list(
all_overlap = format_count(length(common_all)),
enet_rf_overlap = format_count(length(enet_rf_overlap)),
enet_xgb_overlap = format_count(length(enet_xgb_overlap)),
rf_xgb_overlap = format_count(length(rf_xgb_overlap)),
enet_only = format_count(length(enet_only)),
rf_only = format_count(length(rf_only)),
xgb_only = format_count(length(xgb_only))
)
}
# Apply the function to each separated list
comparisons_results <- lapply(separated_lists, compute_detailed_comparisons)
names(comparisons_results) <- patterns
# Function to convert the result list to a dataframe
convert_list_to_dataframe <- function(overlap_list) {
data.frame(
Method = c("all_overlap", "enet_rf", "enet_xgb", "rf_xgb", "enet", "rf", "xgb"),
enet = c(overlap_list$all_overlap, overlap_list$enet_rf_overlap, overlap_list$enet_xgb_overlap, 0, overlap_list$enet_only, 0, 0),
rf   = c(overlap_list$all_overlap, overlap_list$enet_rf_overlap, 0, overlap_list$rf_xgb_overlap, 0, overlap_list$rf_only, 0),
xgb  = c(overlap_list$all_overlap, 0, overlap_list$enet_xgb_overlap, overlap_list$rf_xgb_overlap, 0, 0, overlap_list$xgb_only)
)
}
# Function to generate and save the plot as PDF
generate_and_save_plot <- function(df, filename) {
df_melted <- reshape2::melt(df, id.vars = "Method", variable.name = "Model", value.name = "Value")
df_melted$Method <- factor(df_melted$Method, levels = c("all_overlap", "enet_rf", "enet_xgb", "rf_xgb", "enet", "rf", "xgb"))
p <- ggplot(df_melted, aes(x = Model, y = Value, fill = Method, pattern = Method)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Model", y = "Proportion", fill = "Category") +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c(
"enet" = "white",
"rf" = "gray",
"xgb" = "black",
"enet_rf" = "green",
"enet_xgb" = "blue",
"rf_xgb" = "pink",
"all_overlap" = "purple"
)) +
theme_minimal() +
coord_flip()
# Save the plot as a PDF
pdf(file.path(output_path, paste0(filename, ".pdf")))
print(p)
dev.off()
}
# Generate plots for each comparison result
for (name in names(comparisons_results)) {
overlap_list <- comparisons_results[[name]]
if (is.null(overlap_list) || all(is.na(overlap_list))) next  # Skip invalid results
df <- convert_list_to_dataframe(overlap_list)
generate_and_save_plot(df, name)
}
message("All plots have been successfully generated and saved in: ", output_path)
}
# Function to automate the process
automate_comparisons <- function(output_path, patterns, filtered_list) {
# Ensure output_path exists
if (!dir.exists(output_path)) dir.create(output_path, recursive = TRUE)
# Separate lists based on patterns
separated_lists <- lapply(patterns, function(p) separate_lists_by_pattern(filtered_list, paste0("^", p)))
# Function to compute detailed comparisons
compute_detailed_comparisons <- function(lists) {
if (length(lists) != 3) return(NA)  # Skip if lists do not have exactly 3 elements
enet <- lists[[1]]
rf <- lists[[2]]
xgb <- lists[[3]]
format_count <- function(count) round(count / 20, 2)
common_all <- intersect(intersect(enet, rf), xgb)
enet_rf_overlap <- setdiff(intersect(enet, rf), xgb)
enet_xgb_overlap <- setdiff(intersect(enet, xgb), rf)
rf_xgb_overlap <- setdiff(intersect(rf, xgb), enet)
enet_only <- setdiff(enet, union(rf, xgb))
rf_only <- setdiff(rf, union(enet, xgb))
xgb_only <- setdiff(xgb, union(enet, rf))
list(
all_overlap = format_count(length(common_all)),
enet_rf_overlap = format_count(length(enet_rf_overlap)),
enet_xgb_overlap = format_count(length(enet_xgb_overlap)),
rf_xgb_overlap = format_count(length(rf_xgb_overlap)),
enet_only = format_count(length(enet_only)),
rf_only = format_count(length(rf_only)),
xgb_only = format_count(length(xgb_only))
)
}
# Apply the function to each separated list
comparisons_results <- lapply(separated_lists, compute_detailed_comparisons)
names(comparisons_results) <- patterns
# Function to convert the result list to a dataframe
convert_list_to_dataframe <- function(overlap_list) {
data.frame(
Method = c("all_overlap", "enet_rf", "enet_xgb", "rf_xgb", "enet", "rf", "xgb"),
enet = c(overlap_list$all_overlap, overlap_list$enet_rf_overlap, overlap_list$enet_xgb_overlap, 0, overlap_list$enet_only, 0, 0),
rf   = c(overlap_list$all_overlap, overlap_list$enet_rf_overlap, 0, overlap_list$rf_xgb_overlap, 0, overlap_list$rf_only, 0),
xgb  = c(overlap_list$all_overlap, 0, overlap_list$enet_xgb_overlap, overlap_list$rf_xgb_overlap, 0, 0, overlap_list$xgb_only)
)
}
# Function to generate and save the plot as PDF
generate_and_save_plot <- function(df, filename) {
df_melted <- reshape2::melt(df, id.vars = "Method", variable.name = "Model", value.name = "Value")
df_melted$Method <- factor(df_melted$Method, levels = c("all_overlap", "enet_rf", "enet_xgb", "rf_xgb", "enet", "rf", "xgb"))
p <- ggplot(df_melted, aes(x = Model, y = Value, fill = Method, pattern = Method)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Model", y = "Proportion", fill = "Category") +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c(
"enet" = "white",
"rf" = "gray",
"xgb" = "black",
"enet_rf" = "green",
"enet_xgb" = "blue",
"rf_xgb" = "red",
"all_overlap" = "purple"
)) +
theme_minimal() +
coord_flip()
# Save the plot as a PDF
pdf(file.path(output_path, paste0(filename, ".pdf")))
print(p)
dev.off()
}
# Generate plots for each comparison result
for (name in names(comparisons_results)) {
overlap_list <- comparisons_results[[name]]
if (is.null(overlap_list) || all(is.na(overlap_list))) next  # Skip invalid results
df <- convert_list_to_dataframe(overlap_list)
generate_and_save_plot(df, name)
}
message("All plots have been successfully generated and saved in: ", output_path)
}
#filtered_metabolomics
# patterns for filtered metabolomics
fm_patterns <- c(
"era_age", "era_alcohol", "era_cholesterol", "era_gender", "era_sg",
"franzosa_ControlvsCD_Age", "franzosa_ControlvsCD_Conv", "franzosa_ControlvsCD_Fp",
"franzosa_ControlvsDisease_Age", "franzosa_ControlvsDisease_ConvDisease", "franzosa_ControlvsDisease_Fp",
"franzosa_ControlvsUC_Age", "franzosa_ControlvsUC_Conv", "franzosa_ControlvsUC_Fp",
"yachida_age", "yachida_alcohol", "yachida_BMI", "yachida_BrinkmanIndex",
"yachida_gender", "yachida_healthyvscancer", "yachida_healthyvsearly",
"yachida_healthyvsstageI_II", "yachida_healthyvsstageIII_IV",
"wang_age", "wang_bmi", "wang_creatinine", "wang_egfr", "wang_gender",
"wang_studygroup", "wang_urea"
)
automate_comparisons('/Users/suzettepalmer/Desktop/IntegratedLearner_Dec2024/Coefficients/barplots/metabolomics/filtered',
fm_patterns, metab_filtered_list2)
#unfiltered metabolomics
um_patterns <- c('nf_era_age', 'nf_era_alcohol', 'nf_era_cholesterol',
'nf_era_gender', 'nf_era_glucose', 'nf_era_sg',
'un_franzosa_ControlvsCD_Age', 'un_franzosa_ControlvsCD_Conv',
'un_franzosa_ControlvsCD_Fp', 'un_franzosa_ControlvsDisease_Age',
'un_franzosa_ControlvsDisease_ConvDisease', 'un_franzosa_ControlvsDisease_Fp',
'un_franzosa_ControlvsUC_Age', 'un_franzosa_ControlvsUC_Conv',
'un_franzosa_ControlvsUC_Fp', 'nf_yachida_age', 'nf_yachida_alcohol',
'nf_yachida_BMI', 'nf_yachida_BrinkmanIndex', 'nf_yachida_gender',
'nf_yachida_healthyvscancer', 'nf_yachida_healthyvsearly',
'nf_yachida_healthyvsstageI_II', 'nf_yachida_healthyvsstageIII_IV',
'nf_wang_age', 'nf_wang_bmi', 'nf_wang_creatinine', 'nf_wang_egfr',
'nf_wang_gender', 'nf_wang_studygroup', 'nf_wang_urea'
)
automate_comparisons('/Users/suzettepalmer/Desktop/IntegratedLearner_Dec2024/Coefficients/barplots/metabolomics/unfiltered',
um_patterns, metab_unfiltered_list2)
#filtered taxa
# #patterns for filtered taxa
ft_patterns <- c('era_age', 'era_alcohol', 'era_cholesterol', 'era_gender',
'era_glucose', 'era_sg', 'franzosa_ControlvsCD_Age',
'franzosa_ControlvsCD_Conv', 'franzosa_ControlvsCD_Fp',
'franzosa_ControlvsDisease_Age', 'franzosa_ControlvsDisease_ConvDisease',
'franzosa_ControlvsDisease_Fp', 'franzosa_ControlvsUC_Age',
'franzosa_ControlvsUC_Conv', 'franzosa_ControlvsUC_Fp',
'yachida_age', 'yachida_alcohol', 'yachida_BMI', 'yachida_BrinkmanIndex',
'yachida_gender', 'yachida_healthyvscancer', 'yachida_healthyvsearly',
'yachida_healthyvsstageI_II', 'yachida_healthyvsstageIII_IV',
'wang_age', 'wang_bmi', 'wang_creatinine', 'wang_egfr', 'wang_gender',
'wang_studygroup', 'wang_urea'
)
automate_comparisons('/Users/suzettepalmer/Desktop/IntegratedLearner_Dec2024/Coefficients/barplots/taxa/filtered',
ft_patterns, taxa_filtered_list2)
#unfiltered taxa
# #patterns for unfiltered taxa
ut_patterns <- c('nf_era_age', 'nf_era_alcohol', 'nf_era_cholesterol', 'nf_era_gender',
'nf_era_glucose', 'nf_era_sg', 'un_franzosa_ControlvsCD_Age',
'un_franzosa_ControlvsCD_Conv', 'un_franzosa_ControlvsCD_Fp',
'un_franzosa_ControlvsDisease_Age', 'un_franzosa_ControlvsDisease_ConvDisease',
'un_franzosa_ControlvsDisease_Fp', 'un_franzosa_ControlvsUC_Age',
'un_franzosa_ControlvsUC_Conv', 'un_franzosa_ControlvsUC_Fp',
'nf_yachida_age', 'nf_yachida_alcohol', 'nf_yachida_BMI',
'nf_yachida_BrinkmanIndex', 'nf_yachida_gender', 'nf_yachida_healthyvscancer',
'nf_yachida_healthyvsearly', 'nf_yachida_healthyvsstageI_II',
'nf_yachida_healthyvsstageIII_IV', 'nf_wang_age', 'nf_wang_bmi',
'nf_wang_creatinine', 'nf_wang_egfr', 'nf_wang_gender',
'nf_wang_studygroup', 'nf_wang_urea')
automate_comparisons('/Users/suzettepalmer/Desktop/IntegratedLearner_Dec2024/Coefficients/barplots/taxa/unfiltered',
ut_patterns, taxa_unfiltered_list2)
# #concat filtered
cf_patterns <- c('era_age', 'era_alcohol', 'era_cholesterol', 'era_gender', 'era_glucose',
'era_sg', 'franzosa_ControlvsCD_Age', 'franzosa_ControlvsCD_Conv',
'franzosa_ControlvsCD_Fp', 'franzosa_ControlvsDisease_Age',
'franzosa_ControlvsDisease_ConvDisease', 'franzosa_ControlvsDisease_Fp',
'franzosa_ControlvsUC_Age', 'franzosa_ControlvsUC_Conv', 'franzosa_ControlvsUC_Fp',
'yachida_age', 'yachida_alcohol', 'yachida_BMI', 'yachida_BrinkmanIndex',
'yachida_gender', 'yachida_healthyvscancer', 'yachida_healthyvsearly',
'yachida_healthyvsstageI_II', 'yachida_healthyvsstageIII_IV',
'wang_age', 'wang_bmi', 'wang_creatinine', 'wang_egfr', 'wang_gender',
'wang_studygroup', 'wang_urea')
automate_comparisons('/Users/suzettepalmer/Desktop/IntegratedLearner_Dec2024/Coefficients/barplots/concat/filtered',
cf_patterns, concat_filtered_list2)
# #concat unfiltered
uc_patterns <- c('nf_era_age', 'nf_era_alcohol', 'nf_era_cholesterol', 'nf_era_gender',
'nf_era_glucose', 'nf_era_sg', 'un_franzosa_ControlvsCD_Age',
'un_franzosa_ControlvsCD_Conv', 'un_franzosa_ControlvsCD_Fp',
'un_franzosa_ControlvsDisease_Age', 'un_franzosa_ControlvsDisease_Conv',
'un_franzosa_ControlvsDisease_Fp', 'un_franzosa_ControlvsUC_Age',
'un_franzosa_ControlvsUC_Conv', 'un_franzosa_ControlvsUC_Fp',
'nf_yachida_age', 'nf_yachida_alcohol', 'nf_yachida_BMI',
'nf_yachida_BrinkmanIndex', 'nf_yachida_gender', 'nf_yachida_healthyvscancer',
'nf_yachida_healthyvsearly', 'nf_yachida_healthyvsstageI_II',
'nf_yachida_healthyvsstageIII_IV', 'nf_wang_age', 'nf_wang_bmi',
'nf_wang_creatinine', 'nf_wang_egfr', 'nf_wang_gender', 'nf_wang_studygroup',
'nf_wang_urea')
automate_comparisons('/Users/suzettepalmer/Desktop/IntegratedLearner_Dec2024/Coefficients/barplots/concat/unfiltered',
uc_patterns, concat_unfiltered_list2)
